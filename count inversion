Given an array of integers. Find the Inversion Count in the array.  Two elements arr[i] and arr[j] form an inversion if arr[i] > arr[j] and i < j.

Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If the array is already sorted then the inversion count is 0.
If an array is sorted in the reverse order then the inversion count is the maximum. 

Examples:

Input: arr[] = [2, 4, 1, 3, 5]
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 has three inversions (2, 1), (4, 1), (4, 3).


appraoch 1 tc O(n^2) sc O(1)
using 2 loops

  appraoch 2 tc O(nlogn) sc O(n)

using merge sort
class Solution {
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    static int cnt = 0;
    static void merge(long arr[],int l,int mid,int h){
        ArrayList<Long> li=new ArrayList<>();
        int a=l;
        int b=mid+1;
        while(a<=mid && b<=h){
            if(arr[a]<=arr[b]){
                li.add(arr[a++]);
            }
            else{
                 li.add(arr[b++]);
                 cnt += (mid - a + 1);
            }
        }
              while (a <= mid) {
            li.add(arr[a++]);
        }

        // Copy remaining elements from the right subarray (if any)
        while (b <= h) {
            li.add(arr[b++]);
        }
         for (int k = l; k <= h; k++) {
            arr[k] = li.get(k - l);
        }
    }
    static void mergesort(long arr[],int l,int h){
        if(l<h){
            int mid=(l+h)/2;
            mergesort(arr,l,mid);
            mergesort(arr,mid+1,h);
            merge(arr,l,mid,h);
        }
    }
    static long inversionCount(long arr[]) {
        // Your Code Here
        cnt=0;
        int n=arr.length;
        mergesort(arr,0,n-1);
        return cnt;
    }
}

