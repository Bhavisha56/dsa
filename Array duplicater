tc O(nlogn) sc O(n)
class Solution {
    public static ArrayList<Integer> duplicates(int[] arr) {
        // code here
        
        ArrayList<Integer> li=new ArrayList<>();
        HashMap<Integer,Integer> mp=new HashMap<>();
        for(int i=0;i<arr.length;i++){
              mp.put(arr[i], mp.getOrDefault(arr[i], 0) + 1);
        }
       for(Map.Entry<Integer,Integer> entry:mp.entrySet()){
           if(entry.getValue()>1){
               li.add(entry.getKey());
           }
       }
       Collections.sort(li);
       if(li.size()<1){
           li.add(-1);
       } 
        return li;
        
    }
}
optimed time
tc O(n) sc O(n)
 public static ArrayList<Integer> duplicates(int[] arr) {
        // code here
        ArrayList<Integer> li=new ArrayList<>();
        int n=arr.length;
        int num[]=new int[n];
        for(int i=0;i<n;i++){
            num[arr[i]]++;
        }
        for(int i=0;i<n;i++){
            if(num[i]>1){
                li.add(i);
            }
        }
        if(li.isEmpty()){
            li.add(-1);
        }
        return li;
    }

